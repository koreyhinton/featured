#!/bin/bash

src="${BASH_SOURCE[0]}"
src_full=$(realpath "$src")
src_dir="${src_full%/*}"

. ns import ft_harness ft_snap ft_num ft_wait
. ns require ft_version

# SET DEFAULTS
: ${ft_snap:=-1}
: ${ft_harness:="act.svg"}
: ${ft_num:=}
: ${ft_wait:=0.4}

# SYS VARS
sys_action_wait=1

# TEST NUMBER VALIDATION
if [[ -n "$ft_num" && ! $ft_num =~ ^[0-9][0-9][0-9]$ ]]; then
    echo "Error: when ft_num is set, the variable must be a 3-digit number from 000 to 999" 1>&2
    exit 1
fi

# USER ACTION WAIT VALIDATION
dec_b=0
if [[ "$ft_wait" =~ ^[0-6]?[0-9]?\.[0-9]+$ || "$ft_wait" =~ ^[0-6]?[0-9]?\.$ ]]; then
    # regex test cases: 1.0, 1., 0.1, .1
    dec_b=1
fi
int_b=0
if [[ "$ft_wait" =~ ^[0-9]+$ ]]; then
    # regex test cases: 1, 2, 3
    int_b=1
fi
if [[ -n "$ft_wait" ]]; then
    if [[ "${int_b}${dec_b}" == "00" || "${int_b}${dec_b}" == "11" ]]; then
        # integer OR decimal bit must be set
        echo "Error: ft_wait must be a number n where 0.1 >= n <= 60." 1>&2
        exit 1
    fi
    wait_whole_seconds=$(echo "$ft_wait" | cut -d '.' -f1)
    if [[ -z "$wait_whole_seconds" ]]; then
        wait_whole_seconds=0
    fi
    if [[ $wait_whole_seconds -gt 60 ]]; then
            echo "Error: ft_wait waits after every user action and cannot be > 60 seconds" 1>&2
        exit 1
    fi
    wait_fractional_seconds=$(echo "${ft_wait}.0" | cut -d '.' -f2)
    if [[ $wait_whole_seconds -eq 0 && $wait_fractional_seconds -lt 1 ]]; then
        echo "Error: ft_wait must be a number n where 0.1 >= n <= 60." 1>&2
        exit 1
    fi
fi

# VALIDATE HARNESS DIRECTORY
harn_dir="${src_dir}/${ft_harness}"
if [[ ! -d "$harn_dir" ]]; then
    echo "Error: Harness directory '${harn_dir}' not found." 1>&2
    exit 1
fi

# VALIDATE COMMANDS
for cmd in git npx grep python3 jq chromium chromedriver; do
    command -v $cmd >/dev/null 2>&1 || {
        echo "Error: Command '$cmd' not found. Please install it." 1>&2
        exit 1
    }
done

# NAVIGATE TO WORKING DIRECTORY
cd "${harn_dir}" || {
    echo "Error: Unable to visit harness directory." 1>&2
    exit 1
}

# perform all file i/o from ./ ($harn_dir)

unset harn_dir  # ONLY USE ./ GOING FORWARD!

# VALIDATE VERSIONS CSV
if [[ ! -f "./versions.csv" || ! -s "./versions.csv" ]]; then
    echo "Error: versions.csv is missing or empty in harness directory." 1>&2
    exit 1
fi

# VALIDATE SELENIUM SERVER

if [[ ! -e "${src_dir}/selenium-server-4.27.0.jar" ]]; then
    echo "Error: the selenium server jar file (selenium-server-4.27.0.jar) must be placed inside directory: ${src_dir}"
    exit 1
fi

# PROMPT TO ENSURE SERVER IS RUNNING

py_cmd0="# how to run python web server (in another shell tab)"
py_cmd1="cd act.svg/sut"
py_cmd2="python3 -m http.server"
py_instructions=$'\n'$'\t'"$py_cmd0"$'\n'$'\t'"$py_cmd1"$'\n'$'\t'"$py_cmd2"$'\n'
read -p "Confirm the Python web server is started.${py_instructions}Press enter to continue..." _

# VALIDATE NO PRIOR SESSIONS ARE RUNNING AND PROMPT USER TO CLOSE SESSIONS
# this should avoid flakiness noted sessions were left running
# (and possibly a machine restart happened) and it needs to try
# once and fail to connect before it decides it can do a new session

is_phantom=$(curl -s -H "Content-Type: application/json; charset=utf-8" http://localhost:4444/status 2>/dev/null | grep sessionId | wc -l)

if [[ $is_phantom -gt 0 ]]; then
    phant_info1="A prior (potentially phantom) selenium session was detected."
    phant_info2="To ensure a stable run and if not needed, it is recommended to close the session."
    phant_action1="1. Find the session number here: http://localhost:4444/ui/#/sessions"
    phant_action2="2. Set sessionId variable (in another shell session tab)"
    phant_action3="3. curl -s -X DELETE http://localhost:4444/session/\${sessionId}"
    phant_instructions="$phant_info1"$'\n'"$phant_info2"$'\n'$'\t'"$phant_action1"$'\n'$'\t'
    phant_instructions="$phant_instructions"$'\n'$'\t'"$phant_action2"$'\n'$'\t'"$phant_action3"
    phant_instructions="$phant_instructions"$'\n'"Confirm prior session is closed and then"
    read -p "${phant_instructions} press enter to continue..." _
fi

# CHROME DRIVER
# uncomment to try out the chrome driver directly

# chromedriver --port=9515 --disable-dev-shm-usage --no-sandbox --headless
# curl --request POST \
#   --url http://localhost:9515/session \
#   --header 'Content-Type: application/json; charset=utf-8' \
#   --data '{
#   "capabilities": {
# 		"alwaysMatch": {
# 			"browserName": "chrome"
# 		},
#     "firstMatch": [{}]
#   }
# }
# '

# START SELENIUM SERVER

# for testing this code block separately in a shell, first do these steps:
# 1) browse to featured dir
# 2) and assign: src_dir="${PWD}"
mkdir -p "${src_dir}/logs/selenium"
sel_log_file="${src_dir}/logs/selenium/stdout-latest.txt"
sel_chromedriver=$(which chromedriver)
echo "starting selenium server (port 4444), server log: ${sel_log_file}"
# java -Dwebdriver.chrome.driver=${sel_chromedriver} -jar "${src_dir}/selenium-server-4.27.0.jar" standalone --host 0.0.0.0 --port 4444 1> "${sel_log_file}" 2>&1 &
java -jar "${src_dir}/selenium-server-4.27.0.jar" standalone 1> "${sel_log_file}" 2>&1 &
sel_pid=$!
sleep "$sys_action_wait"
sel_sid=$(curl -s -X POST -H "Content-Type: application/json; charset=utf-8" \
  -d '{
  "capabilities": {
		"alwaysMatch": {
			"browserName": "chrome"
		},
    "firstMatch": [{}]
  }
}
' http://localhost:4444/session 2>/dev/null | jq -r '.value.sessionId')
unset sel_log_file sel_chromedriver
sleep "$sys_action_wait"

curl -s -X POST -H "Content-Type: application/json; charset=utf-8" \
  -d '{
        "width": 1600,
        "height": 1000
      }' \
  http://localhost:4444/session/${sel_sid}/window/rect 2>/dev/null 1>&2

sleep "$sys_action_wait"


# DETERMINE VERSION ORDINAL
# version_ordinal determines the target version for non-snapshot mode or 
# the maximum version to process in snapshot mode.
version_ordinal=-1
version_index=index.html

while IFS=',' read -r harness giturl gittag index version ordinal; do
    if [[ "$giturl" == "giturl" ]]; then
        continue
    fi
    gitname=$(echo "$giturl" | cut -d '/' -f2)
    echo "${gitname} ${giturl} ${gittag}"
    if [[ "$version" == "$ft_version"  && "$ft_harness" == "$harness" ]]; then
        version_ordinal="$ordinal"
        version_index="$index"
        break
    fi
done < "./versions.csv"

if [[ $version_ordinal -eq -1 ]]; then
    echo "Error: Version '$ft_version' not found in versions.csv for harness '$ft_harness'." 1>&2
    exit 1
fi

# MAKE DIRECTORIES

mkdir -p ./act.svg/reports  # Ensure the reports folder exists

# IF NON-SNAPSHOT MODE -- RUN ONCE
if [[ $ft_snap -eq 0 ]]; then

    # prepare test run
    if [[ -d "./sut" ]]; then
        rm -rf "./sut"
    fi
    # result_file="./results.${version_ordinal}"
    # if [[ -f "$result_file" ]]; then
    #     rm "$result_file"
    # fi
    gitname=$(echo "$giturl" | cut -d '/' -f2)
    GIT_SSH_COMMAND="${GIT_SSH}" git clone "git@github.com:${giturl}.git" sut 1>/dev/null 2>&1 || {
        echo "Error: Failed to clone repository: ${giturl}" 1>&2
        exit 1
    }
    (cd sut && GIT_SSH_COMMAND="${GIT_SSH}" git checkout "$gittag" 1>/dev/null 2>/dev/null) || {
        echo "Error: Failed to checkout tag '$gittag' in repository '${giturl}'." 1>&2
        exit 1
    }
    echo "$version_ordinal" > "./sut.version"  # readable by tests

    # run tests
    # echo "test ${version_index}. ${PWD}"
    ft_index=${index}
    for t in `ls ${src_dir}/act.svg/tests/test-${ft_num}* | sort`
    do
        if [[ "$t" =~ '~' ]]; then
            continue
        fi
        . ns run "$t"
    done
    . ns delete ft_index
    # res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="${version_index}")
    # echo "$res"
    # passed=$(echo "$res" | grep -oP "Tests passed: \K\d+" || echo "0")
    # failed=$(echo "$res" | grep -oP "Tests failed: \K\d+" || echo "0")
    # errors=$(echo "$res" | grep -oP "Errors: \K\d+" || echo "0")
    # skipped=$(echo "$res" | grep -oP "Skipped: \K\d+" || echo "0")
    # # defaults
    # : ${passed:=0}
    # : ${failed:=0}
    # : ${errors:=0}
    # : ${skipped:=0}

    # echo "${ft_version},$passed,$failed,$errors,$skipped" >> "$result_file"
    read -p "Test run has ended. Press enter to quit the session..." _
    curl -s -X DELETE http://localhost:4444/session/${sel_sid} 1>/dev/null 2>/dev/null
    sleep "$sys_action_wait"
    exit 0
fi

unset giturl gittag

# SNAPSHOT MODE -- RUN EACH SNAPSHOT
while IFS=',' read -r harness giturl gittag index version ordinal; do

    if [[ "$giturl" == "giturl" ]]; then
        continue
    fi

    # prepare test run
    if [[ -d "./sut" ]]; then
        rm -rf "./sut"
    fi
    # result_file="./results.${ordinal}"
    # if [[ -f "$result_file" ]]; then
    #     rm "$result_file"
    # fi

    gitname=$(echo "$giturl" | cut -d '/' -f2)

    GIT_SSH_COMMAND="${GIT_SSH}" git clone "git@github.com:${giturl}.git" sut 1>/dev/null 2>&1 || {
        echo "Error: Failed to clone repository: ${giturl}" 1>&2
        exit 1
    }
    (cd sut && GIT_SSH_COMMAND="${GIT_SSH}" git checkout "$gittag" 1>/dev/null 2>/dev/null) || {
        echo "Error: Failed to checkout tag '$gittag' in repository '${giturl}'." 1>&2
        exit 1
    }
    echo "$ordinal" > "./sut.version"  # readable by tests

    # run tests
    ft_index=${index}
    for t in `ls ${src_dir}/act.svg/tests/test-${ft_num}* | sort`
    do
        if [[ "$t" =~ '~' ]]; then
            continue
        fi
        . ns run "$t"
    done
    . ns delete ft_index
    # res=
    # if [[ $ordinal -le ${version_ordinal} ]]; then
    #     # (todo: test older/stabler versions on firefox)
    #     res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="$index")
    # else
    #     # test latest versions on chrome
    #     res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="$index")
    # fi
    # passed=$(echo "$res" | grep -oP "Tests passed: \K\d+" || echo "0")
    # failed=$(echo "$res" | grep -oP "Tests failed: \K\d+" || echo "0")
    # errors=$(echo "$res" | grep -oP "Errors: \K\d+" || echo "0")
    # skipped=$(echo "$res" | grep -oP "Skipped: \K\d+" || echo "0")
    # # defaults
    # : ${passed:=0}
    # : ${failed:=0}
    # : ${errors:=0}
    # : ${skipped:=0}
    # echo "${ft_version},$passed,$failed,$errors,$skipped" >> "$result_file"
done < "./versions.csv"

read -p "Test run has ended. Press enter to quit the session..." _
curl -s -X DELETE http://localhost:4444/session/${sel_sid} 1>/dev/null 2>/dev/null
sleep "$sys_action_wait"


# exporting any test variable might be dangerous on a re-run
# where a certain harness, version, or test might succeed
# due to previous test run data that was forgotten to be re-specified
