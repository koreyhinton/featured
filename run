#!/bin/bash

src="${BASH_SOURCE[0]}"
src_full=$(realpath "$src")
src_dir="${src_full%/*}"

. ns import ft_harness ft_snap
. ns require ft_version

# SET DEFAULTS
: ${ft_snap:=-1}
: ${ft_harness:="act.svg"}

# VALIDATE HARNESS DIRECTORY
harn_dir="${src_dir}/${ft_harness}"
if [[ ! -d "$harn_dir" ]]; then
    echo "Error: Harness directory '${harn_dir}' not found." 1>&2
    exit 1
fi

# VALIDATE COMMANDS
for cmd in git npx grep python3 jq chromium chromedriver; do
    command -v $cmd >/dev/null 2>&1 || {
        echo "Error: Command '$cmd' not found. Please install it." 1>&2
        exit 1
    }
done

# NAVIGATE TO WORKING DIRECTORY
cd "${harn_dir}" || {
    echo "Error: Unable to visit harness directory." 1>&2
    exit 1
}

# perform all file i/o from ./ ($harn_dir)

unset harn_dir  # ONLY USE ./ GOING FORWARD!

# VALIDATE VERSIONS CSV
if [[ ! -f "./versions.csv" || ! -s "./versions.csv" ]]; then
    echo "Error: versions.csv is missing or empty in harness directory." 1>&2
    exit 1
fi

# VALIDATE SELENIUM SERVER

if [[ ! -e "${src_dir}/selenium-server-4.27.0.jar" ]]; then
    echo "Error: the selenium server jar file (selenium-server-4.27.0.jar) must be placed inside directory: ${src_dir}"
    exit 1
fi

# PROMPT TO ENSURE SERVER IS RUNNING

read -p "Confirm the Python web server is started. Press enter to continue..." _

# CHROME DRIVER
# uncomment to try out the chrome driver directly

# chromedriver --port=9515 --disable-dev-shm-usage --no-sandbox --headless
# curl --request POST \
#   --url http://localhost:9515/session \
#   --header 'Content-Type: application/json; charset=utf-8' \
#   --data '{
#   "capabilities": {
# 		"alwaysMatch": {
# 			"browserName": "chrome"
# 		},
#     "firstMatch": [{}]
#   }
# }
# '

# START SELENIUM SERVER

# for testing this code block separately in a shell, first do these steps:
# 1) browse to featured dir
# 2) and assign: src_dir="${PWD}"
mkdir -p "${src_dir}/logs/selenium"
sel_log_file="${src_dir}/logs/selenium/stdout-latest.txt"
sel_port=4444
sel_chromedriver=$(which chromedriver)
echo "starting selenium server (port ${sel_port}), server log: ${sel_log_file}"
# java -Dwebdriver.chrome.driver=${sel_chromedriver} -jar "${src_dir}/selenium-server-4.27.0.jar" standalone --host 0.0.0.0 --port 4444 1> "${sel_log_file}" 2>&1 &
java -jar "${src_dir}/selenium-server-4.27.0.jar" standalone 1> "${sel_log_file}" 2>&1 &
sel_pid=$!
sleep 4
sel_sid=$(curl -s -X POST -H "Content-Type: application/json; charset=utf-8" \
  -d '{
  "capabilities": {
		"alwaysMatch": {
			"browserName": "chrome"
		},
    "firstMatch": [{}]
  }
}
' http://localhost:${sel_port}/session | jq -r '.value.sessionId')
unset sel_log_file sel_chromedriver
sleep 4
TEST_URL="http://localhost:8000/www/svg/ActSvg.html"
curl -s -X POST -H "Content-Type: application/json; charset=utf-8" \
  -d "{\"url\": \"$TEST_URL\"}" \
  http://localhost:4444/session/${sel_sid}/url


# DETERMINE VERSION ORDINAL
# version_ordinal determines the target version for non-snapshot mode or 
# the maximum version to process in snapshot mode.
version_ordinal=-1
version_index=index.html

while IFS=',' read -r harness giturl gittag index ordinal; do
    if [[ "$giturl" == "giturl" ]]; then
        continue
    fi
    gitname=$(echo "$giturl" | cut -d '/' -f2)
    echo "${gitname} ${giturl} ${gittag}"
    if [[ "$gittag" == "$ft_version"  && "$ft_harness" == "$harness" ]]; then
        version_ordinal="$ordinal"
        version_index="$index"
        break
    fi
done < "./versions.csv"

if [[ $version_ordinal -eq -1 ]]; then
    echo "Error: Version '$ft_version' not found in versions.csv for harness '$ft_harness'." 1>&2
    exit 1
fi

# MAKE DIRECTORIES

mkdir -p ./act.svg/reports  # Ensure the reports folder exists

# IF NON-SNAPSHOT MODE -- RUN ONCE
if [[ $ft_snap -eq 0 ]]; then

    # prepare test run
    if [[ -d "./sut" ]]; then
        rm -rf "./sut"
    fi
    result_file="./results.${version_ordinal}"
    if [[ -f "$result_file" ]]; then
        rm "$result_file"
    fi
    gitname=$(echo "$giturl" | cut -d '/' -f2)
    GIT_SSH_COMMAND="${GIT_SSH}" git clone "git@github.com:${giturl}.git" sut || {
        echo "Error: Failed to clone repository: ${giturl}" 1>&2
        exit 1
    }
    (cd sut && GIT_SSH_COMMAND="${GIT_SSH}" git checkout "$gittag") || {
        echo "Error: Failed to checkout tag '$gittag' in repository '${giturl}'." 1>&2
        exit 1
    }
    echo "$version_ordinal" > "./sut.version"  # readable by tests

    # run tests
    echo "test ${version_index}. ${PWD}"
    res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="${version_index}")
    echo "$res"
    passed=$(echo "$res" | grep -oP "Tests passed: \K\d+" || echo "0")
    failed=$(echo "$res" | grep -oP "Tests failed: \K\d+" || echo "0")
    errors=$(echo "$res" | grep -oP "Errors: \K\d+" || echo "0")
    skipped=$(echo "$res" | grep -oP "Skipped: \K\d+" || echo "0")
    # defaults
    : ${passed:=0}
    : ${failed:=0}
    : ${errors:=0}
    : ${skipped:=0}

    echo "${ft_version},$passed,$failed,$errors,$skipped" >> "$result_file"
    exit 0
fi

unset giturl gittag

# SNAPSHOT MODE -- RUN EACH SNAPSHOT
while IFS=',' read -r harness giturl gittag index ordinal; do

    if [[ "$giturl" == "giturl" ]]; then
        continue
    fi

    # prepare test run
    if [[ -d "./sut" ]]; then
        rm -rf "./sut"
    fi
    result_file="./results.${ordinal}"
    if [[ -f "$result_file" ]]; then
        rm "$result_file"
    fi

    gitname=$(echo "$giturl" | cut -d '/' -f2)

    GIT_SSH_COMMAND="${GIT_SSH}" git clone "git@github.com:${giturl}.git" sut || {
        echo "Error: Failed to clone repository: ${giturl}" 1>&2
        exit 1
    }
    (cd sut && GIT_SSH_COMMAND="${GIT_SSH}" git checkout "$gittag") || {
        echo "Error: Failed to checkout tag '$gittag' in repository '${giturl}'." 1>&2
        exit 1
    }
    echo "$version_ordinal" > "./sut.version"  # readable by tests

    # run tests
    res=
    if [[ $ordinal -le ${version_ordinal} ]]; then
        # (todo: test older/stabler versions on firefox)
        res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="$index")
    else
        # test latest versions on chrome
        res=$(npx nightwatch --env="chrome" --src=tests --git-tag="$ft_version" --index="$index")
    fi
    passed=$(echo "$res" | grep -oP "Tests passed: \K\d+" || echo "0")
    failed=$(echo "$res" | grep -oP "Tests failed: \K\d+" || echo "0")
    errors=$(echo "$res" | grep -oP "Errors: \K\d+" || echo "0")
    skipped=$(echo "$res" | grep -oP "Skipped: \K\d+" || echo "0")
    # defaults
    : ${passed:=0}
    : ${failed:=0}
    : ${errors:=0}
    : ${skipped:=0}

    echo "${ft_version},$passed,$failed,$errors,$skipped" >> "$result_file"

done < "./versions.csv"
